=== FIRST and FOLLOW Sets ===

For non-terminal program:
FIRST = { TK_MAIN TK_FUNID }
FOLLOW = { TK_DOLLAR }

For non-terminal mainFunction:
FIRST = { TK_MAIN }
FOLLOW = { TK_DOLLAR }

For non-terminal otherFunctions:
FIRST = { TK_FUNID EPSILON }
FOLLOW = { TK_MAIN }

For non-terminal function:
FIRST = { TK_FUNID }
FOLLOW = { TK_FUNID TK_MAIN }

For non-terminal input_par:
FIRST = { TK_INPUT }
FOLLOW = { TK_OUTPUT TK_SEM }

For non-terminal output_par:
FIRST = { TK_OUTPUT EPSILON }
FOLLOW = { TK_SEM }

For non-terminal parameter_list:
FIRST = { TK_INT TK_REAL TK_RECORD TK_UNION TK_RUID }
FOLLOW = { TK_SQR }

For non-terminal dataType:
FIRST = { TK_INT TK_REAL TK_RECORD TK_UNION TK_RUID }
FOLLOW = { TK_ID TK_COLON }

For non-terminal primitiveDatatype:
FIRST = { TK_INT TK_REAL }
FOLLOW = { TK_ID TK_COLON }

For non-terminal constructedDatatype:
FIRST = { TK_RECORD TK_UNION TK_RUID }
FOLLOW = { TK_ID TK_COLON }

For non-terminal remaining_list:
FIRST = { TK_COMMA EPSILON }
FOLLOW = { TK_SQR }

For non-terminal stmts:
FIRST = { TK_TYPE TK_RECORD TK_UNION TK_DEFINETYPE TK_ID TK_WHILE TK_IF TK_READ TK_WRITE TK_SQL TK_CALL TK_RETURN }
FOLLOW = { TK_END }

For non-terminal typeDefinitions:
FIRST = { TK_RECORD TK_UNION TK_DEFINETYPE EPSILON }
FOLLOW = { TK_ID TK_WHILE TK_IF TK_READ TK_WRITE TK_SQL TK_CALL TK_RETURN }

For non-terminal actualOrRedefined:
FIRST = { TK_RECORD TK_UNION TK_DEFINETYPE }
FOLLOW = { TK_RECORD TK_UNION TK_DEFINETYPE TK_ID TK_WHILE TK_IF TK_READ TK_WRITE TK_SQL TK_CALL TK_RETURN }

For non-terminal typeDefinition:
FIRST = { TK_RECORD TK_UNION }
FOLLOW = { TK_RECORD TK_UNION TK_DEFINETYPE TK_ID TK_WHILE TK_IF TK_READ TK_WRITE TK_SQL TK_CALL TK_RETURN }

For non-terminal fieldDefinitions:
FIRST = { TK_TYPE }
FOLLOW = { TK_ENDRECORD TK_ENDUNION }

For non-terminal fieldDefinition:
FIRST = { TK_TYPE }
FOLLOW = { TK_TYPE TK_ENDRECORD TK_ENDUNION }

For non-terminal fieldtype:
FIRST = { TK_INT TK_REAL TK_RECORD TK_UNION TK_RUID }
FOLLOW = { TK_COLON }

For non-terminal moreFields:
FIRST = { TK_TYPE EPSILON }
FOLLOW = { TK_ENDRECORD TK_ENDUNION }

For non-terminal declarations:
FIRST = { TK_TYPE EPSILON }
FOLLOW = { TK_RECORD TK_UNION TK_DEFINETYPE TK_ID TK_WHILE TK_IF TK_READ TK_WRITE TK_SQL TK_CALL TK_RETURN }

For non-terminal declaration:
FIRST = { TK_TYPE }
FOLLOW = { TK_TYPE TK_RECORD TK_UNION TK_DEFINETYPE TK_ID TK_WHILE TK_IF TK_READ TK_WRITE TK_SQL TK_CALL TK_RETURN }

For non-terminal global_or_not:
FIRST = { TK_COLON EPSILON }
FOLLOW = { TK_SEM }

For non-terminal otherStmts:
FIRST = { TK_ID TK_WHILE TK_IF TK_READ TK_WRITE TK_SQL TK_CALL EPSILON }
FOLLOW = { TK_RETURN TK_ENDWHILE TK_ELSE TK_ENDIF }

For non-terminal stmt:
FIRST = { TK_ID TK_WHILE TK_IF TK_READ TK_WRITE TK_SQL TK_CALL }
FOLLOW = { TK_ID TK_WHILE TK_IF TK_READ TK_WRITE TK_SQL TK_CALL TK_RETURN TK_ENDWHILE TK_ELSE TK_ENDIF }

For non-terminal assignmentStmt:
FIRST = { TK_ID }
FOLLOW = { TK_ID TK_WHILE TK_IF TK_READ TK_WRITE TK_SQL TK_CALL TK_RETURN TK_ENDWHILE TK_ELSE TK_ENDIF }

For non-terminal singleOrRecId:
FIRST = { TK_ID }
FOLLOW = { TK_ASSIGNOP TK_CL TK_MUL TK_DIV TK_PLUS TK_MINUS TK_SEM TK_LT TK_LE TK_EQ TK_GT TK_GE TK_NE }

For non-terminal oneExpansion:
FIRST = { TK_DOT }
FOLLOW = { TK_DOT TK_ASSIGNOP TK_CL TK_MUL TK_DIV TK_PLUS TK_MINUS TK_SEM TK_LT TK_LE TK_EQ TK_GT TK_GE TK_NE }

For non-terminal moreExpansions:
FIRST = { TK_DOT EPSILON }
FOLLOW = { TK_ASSIGNOP TK_CL TK_MUL TK_DIV TK_PLUS TK_MINUS TK_SEM TK_LT TK_LE TK_EQ TK_GT TK_GE TK_NE }

For non-terminal funCallStmt:
FIRST = { TK_SQL TK_CALL }
FOLLOW = { TK_ID TK_WHILE TK_IF TK_READ TK_WRITE TK_SQL TK_CALL TK_RETURN TK_ENDWHILE TK_ELSE TK_ENDIF }

For non-terminal outputParameters:
FIRST = { TK_SQL EPSILON }
FOLLOW = { TK_CALL }

For non-terminal inputParameters:
FIRST = { TK_SQL }
FOLLOW = { TK_SEM }

For non-terminal iterativeStmt:
FIRST = { TK_WHILE }
FOLLOW = { TK_ID TK_WHILE TK_IF TK_READ TK_WRITE TK_SQL TK_CALL TK_RETURN TK_ENDWHILE TK_ELSE TK_ENDIF }

For non-terminal conditionalStmt:
FIRST = { TK_IF }
FOLLOW = { TK_ID TK_WHILE TK_IF TK_READ TK_WRITE TK_SQL TK_CALL TK_RETURN TK_ENDWHILE TK_ELSE TK_ENDIF }

For non-terminal elsePart:
FIRST = { TK_ELSE TK_ENDIF }
FOLLOW = { TK_ID TK_WHILE TK_IF TK_READ TK_WRITE TK_SQL TK_CALL TK_RETURN TK_ENDWHILE TK_ELSE TK_ENDIF }

For non-terminal ioStmt:
FIRST = { TK_READ TK_WRITE }
FOLLOW = { TK_ID TK_WHILE TK_IF TK_READ TK_WRITE TK_SQL TK_CALL TK_RETURN TK_ENDWHILE TK_ELSE TK_ENDIF }

For non-terminal arithmeticExpression:
FIRST = { TK_OP TK_ID TK_NUM TK_RNUM }
FOLLOW = { TK_SEM TK_CL }

For non-terminal expPrime:
FIRST = { TK_PLUS TK_MINUS EPSILON }
FOLLOW = { TK_SEM TK_CL }

For non-terminal term:
FIRST = { TK_OP TK_ID TK_NUM TK_RNUM }
FOLLOW = { TK_PLUS TK_MINUS TK_SEM TK_CL }

For non-terminal termPrime:
FIRST = { TK_MUL TK_DIV EPSILON }
FOLLOW = { TK_PLUS TK_MINUS TK_SEM TK_CL }

For non-terminal factor:
FIRST = { TK_OP TK_ID TK_NUM TK_RNUM }
FOLLOW = { TK_MUL TK_DIV TK_PLUS TK_MINUS TK_SEM TK_CL }

For non-terminal highPrecedenceOperator:
FIRST = { TK_MUL TK_DIV }
FOLLOW = { TK_OP TK_ID TK_NUM TK_RNUM }

For non-terminal lowPrecedenceOperators:
FIRST = { TK_PLUS TK_MINUS }
FOLLOW = { TK_OP TK_ID TK_NUM TK_RNUM }

For non-terminal booleanExpression:
FIRST = { TK_OP TK_ID TK_NUM TK_RNUM TK_NOT }
FOLLOW = { TK_CL }

For non-terminal var:
FIRST = { TK_ID TK_NUM TK_RNUM }
FOLLOW = { TK_CL TK_MUL TK_DIV TK_PLUS TK_MINUS TK_SEM TK_LT TK_LE TK_EQ TK_GT TK_GE TK_NE }

For non-terminal logicalOp:
FIRST = { TK_AND TK_OR }
FOLLOW = { TK_OP }

For non-terminal relationalOp:
FIRST = { TK_LT TK_LE TK_EQ TK_GT TK_GE TK_NE }
FOLLOW = { TK_ID TK_NUM TK_RNUM }

For non-terminal returnStmt:
FIRST = { TK_RETURN }
FOLLOW = { TK_END }

For non-terminal optionalReturn:
FIRST = { TK_SQL EPSILON }
FOLLOW = { TK_SEM }

For non-terminal idList:
FIRST = { TK_ID }
FOLLOW = { TK_SQR }

For non-terminal more_ids:
FIRST = { TK_COMMA EPSILON }
FOLLOW = { TK_SQR }

For non-terminal definetypestmt:
FIRST = { TK_DEFINETYPE }
FOLLOW = { TK_RECORD TK_UNION TK_DEFINETYPE TK_ID TK_WHILE TK_IF TK_READ TK_WRITE TK_SQL TK_CALL TK_RETURN }

For non-terminal A:
FIRST = { TK_RECORD TK_UNION }
FOLLOW = { TK_RUID }

For non-terminal option_single_constructed:
FIRST = { TK_DOT EPSILON }
FOLLOW = { TK_ASSIGNOP TK_CL TK_MUL TK_DIV TK_PLUS TK_MINUS TK_SEM TK_LT TK_LE TK_EQ TK_GT TK_GE TK_NE }

=== End of FIRST and FOLLOW Sets ===